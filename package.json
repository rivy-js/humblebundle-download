{
	"name": "humblebundle-download",
	"version": "2.0.0",
	"license": "Unlicense",
	"main": "index.js",
	"bin": {
		"humblebundle-download": "index.js"
	},
	"scripts": {
		"default # run package": "",
		"default": "node index.js",
		"# clean # remove build artifacts": "",
		"clean": "shx rm -fr build dist",
		"# fix # fix package issues (automated/non-interactive)": "",
		"fix": "run-s fix:*",
		"# fix:lint # fix ESLint issues": "",
		"fix:lint": "eslint . --fix",
		"# fix:style # fix Prettier formatting issues": "",
		"fix:style": "prettier . --write --list-different",
		"# help # display help": "",
		"help": "run-s --silent _:help",
		"# lint # check for package code 'lint'": "",
		"lint": "run-s --silent +:max-node-8 && shx echo \"[lint] WARN Lint checks skipped [for NodeJS < v10]\" 1>&2 || run-p --print-name \"lint:*\"",
		"# lint:audit # check for `npm audit` violations in project code": "",
		"lint:audit": "run-s --silent -- npm audit --omit dev",
		"# lint:commits # check for commit flaws (using `commitlint` and `cspell`)": "",
		"lint:commits": "run-p --silent \"_:lint:commits:new:*\"",
		"# lint:editorconfig # check for EditorConfig format flaws (using `editorconfig-checker`)": "",
		"lint:editorconfig": "editorconfig-checker -config .ecrc.JS.json",
		"# lint:lint # check for code 'lint' (using `eslint`)": "",
		"lint:lint": "eslint .",
		"# lint:markdown # check for markdown errors (using `remark`)": "",
		"lint:markdown": "remark --quiet .",
		"# lint:spell # check for spelling errors (using `cspell`)": "",
		"lint:spell": "cspell {eg,examples,src,test}/**/* CHANGELOG{,.md,.mkd} README{,.md,.mkd} --no-summary --config \".vscode/cspell.json\"",
		"# lint:style # check for format imperfections (using `prettier`)": "",
		"lint:style": "prettier . --check --loglevel warn",
		"# realclean # remove all generated files": "",
		"realclean": "run-s clean && shx rm -fr .coverage .nyc_output",
		"# test # test package": "",
		"test": "run-s lint",
		"_:min-node-8": "is-node-modern 8",
		"## +:... == sub-scripts (may run 'visibly', but not user-facing)": "",
		"+:coverage": "run-s build test:code && ( is-ci && run-s cov:send ) || ( run-s --silent _:is-not-ci && run-s cov:view )",
		"+:max-node-8": "is-node-not-modern 10",
		"+:min-node-10": "is-node-modern 10",
		"## _:... == sub-scripts ('hidden'; generally should be run 'silently' using `run-s/run-p --silent ...`": "",
		"_:debug:env": "node -e \"console.log({env: process.env})\"",
		"_:exists:git-changelog": "node -e \"if (!require('command-exists').sync('git-changelog')){process.exit(1);};\" || ( shx echo \"WARN `git-changelog` missing (try `go get -u github.com/rivy-go/git-changelog/cmd/git-changelog`)\" & exit 1 )",
		"* _:help # print usage/TARGETs by matching lines containing leading double-quoted text like `# TARGET_NAME # HELP_TEXT`": "",
		"_:help": "< package.json node -e \"s = {p:'',e:'npm'}; if (new String(process.env.npm_execpath).match(/yarn.js$/)) { s = {p:'\\n',e:'yarn'}; }; console.log('%sUsage: \\`\\x1b[2m%s run TARGET\\x1b[m\\` or \\`\\x1b[2mnpx run-s TARGET [TARGET..]\\x1b[m\\`\\n\\nTARGETs:\\n', s.p, s.e); re = /^.*?\\x22(?:#\\s*)(\\w[^#\\x22]*)\\s+#+\\s+([^\\x22]+?)(\\s+#+)?\\x22.*$/; require('readline').createInterface({ input: process.stdin, output: process.stdout, terminal: false }).on('line', function(line){ if (match = re.exec(line)) { console.log('\\x1b[0;32m%s\\x1b[m %s', match[1].padEnd(19), match[2]); } }).on('close', () => { console.log('\\u3000'); /^win/i.test(process.platform) && console.log('\\x1b[2A'); });\"",
		"_:is-not-ci": "is-ci && exit 1 || exit 0",
		"_:lint:commits:all:spell": "node -e \"result=require('child_process').spawnSync('git log --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s)\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"",
		"* _:lint:commits:new:... * note: review from 'origin/last' or tag just prior to version-sorted latest, with fallback to first commit": "",
		"_:lint:commits:new:commitlint": "node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('commitlint --config .commitlint.config.js --from '+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[commitlint] ERR! Flawed commit(s) found (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else { (result.stdout.length > 0) && console.log(result.stdout);};\" || shx true",
		"_:lint:commits:new:spell": "node -e \"result=require('child_process').spawnSync('( git tag --list [#v]* --contains origin/last --sort=v:refname || shx true ) && ( git describe --tags --abbrev=0 HEAD~1 || shx true ) && ( git rev-list --max-parents=0 HEAD --abbrev-commit --abbrev=16 || shx true )',{shell:true,encoding:'utf-8'}); o=result.stdout.split(/\\r?\\n/).filter((s)=>!!s); vs=o; v=vs[0]; result=require('child_process').spawnSync('git log '+v+'.. --color=never | cspell stdin --no-summary --config \".vscode/cspell.json\"',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[cspell] ERR! Unknown words in commit(s) (within \\'%s..HEAD\\')\\n'+result.stdout+'\\n'+result.stderr, v); process.exit(1);} else {(result.stdout.length > 0) && console.log(result.stdout);};\" || shx true",
		"_:show:deps:dev": "npm --silent ls --only development || shx true",
		"_:show:deps:prod": "npm --silent ls --only production || shx true",
		"_:vcs-clean": "git diff --quiet",
		"_:vcs-clean-err": "run-s --silent _:vcs-clean || ( shx echo \"[vcs] ERR! Uncommitted changes\" 1>&2 & exit 1 )",
		"_:vcs-strictly-clean": "git status --porcelain | node -e \"process.stdin.on('data',function(_){process.exit(1);});\"",
		"_:vcs-strictly-clean-err": "run-s --silent _:vcs-strictly-clean || ( shx echo \"[vcs] ERR! Uncommitted changes and/or untracked files\" 1>&2 & exit 1 )",
		"_:update:changelog": "run-s --silent _:exists:git-changelog && git changelog > CHANGELOG.mkd || shx echo \"[update] WARN CHANGELOG not updated\" 1>&2",
		"_:update:dist.build": "shx rm -fr dist/cjs dist/esm && shx mkdir -p dist/cjs dist/esm && shx cp -r build/cjs/src/* dist/cjs && shx cp -r build/esm/src/* dist/esm",
		"_:update:dist.normalizeEOL": "eolConverter lf dist/**/*.{cjs,js,mjs,ts,json}",
		"_:update:dist.pack": "node -e \"delete process.env.npm_config_dry_run; name=require('./package.json').name; name=name.replace(/^@/,'').replace('/','-'); result=require('child_process').spawnSync('npm pack && shx mkdir -p dist && shx mv '+name+'-*.tgz dist/'+name+'.tgz',{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('[update] ERR! Unable to package (into *.tgz) for distribution\\n'+result.stdout+'\\n'+result.stderr); process.exit(1);} else {console.log(result.stdout);};\"",
		"_:update:dist.types": "shx mkdir -p dist && shx rm -fr dist/types && rollup --config .rollup.config.types.js && replace-in-file \"export { _default as default }\" \"export = _default\" dist/types/mod.cjs.d.ts --quiet && shx mkdir -p dist/cjs && shx cp dist/types/*.cjs.d.ts dist/cjs",
		"_:update:dist:rebuild": "shx rm -fr dist && run-s --silent _:update:dist.build _:update:dist.types _:update:dist.normalizeEOL _:update:dist.pack && shx mkdir -p dist/.targets && shx touch build/.targets/update-dist.succeeded",
		"_:version:spell:changelog_update": "run-s --silent _:exists:git-changelog && git changelog -u | cspell stdin --config \".vscode/cspell.json\" || shx echo \"[lint] WARN CHANGELOG update `cspell` exception\" 1>&2",
		"_:version:update:changelog": "run-s --silent _:exists:git-changelog && node -e \"v=require('./package.json').version; result=require('child_process').spawnSync('git changelog --next-tag-now --next-tag v'+v,{shell:true,encoding:'utf-8'}); if (result.status != 0) {console.error('ERR! '+result.stderr); process.exit(1);} else {m='fs';require(m).writeFileSync('CHANGELOG.mkd',result.stdout);};\" || shx echo \"[version] WARN CHANGELOG not updated\" 1>&2",
		"## npm lifecycle scripts ##": "",
		"prepublishOnly": "run-s clean update && cross-env npm_config_test_dist=true npm run test && run-s --silent update _:vcs-strictly-clean-err",
		"## npm-version scripts ##": "",
		"preversion": "run-s --silent _:version:spell:changelog_update && cross-env npm_config_test_dist=true npm run test",
		"version": "run-s --silent _:version:update:changelog && run-s lint:spell && run-s --silent update:dist && git add CHANGELOG.mkd dist"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/rivy/humblebundle-download.git"
	},
	"author": "David Marby <david@dmarby.se> http://dmarby.se",
	"contributors": [
		"Roy Ivy III <rivy.dev@gmail.com> (http://github.com/rivy)",
		"J. Longman (https://github.com/jlongman)",
		"Johannes LÃ¶thberg (https://github.com/kyrias)"
	],
	"keywords": [
		"cli",
		"download",
		"downloader",
		"humblebundle"
	],
	"dependencies": {
		"async": "^2.6.3",
		"bottleneck": "^2.19.5",
		"breeze": "^1.2.2",
		"cli-progress": "^2.1.1",
		"colors": "^1.4.0",
		"commander": "^2.20.3",
		"enquirer": "^2.3.6",
		"fs-extra": "^8.1.0",
		"locate-path": "^5.0.0",
		"make-dir": "^3.0.2",
		"nasa-keypath": "0.0.1",
		"nightmare": "^3.0.2",
		"readline": "^1.3.0",
		"request": "^2.88.2",
		"sanitize-filename": "^1.6.3",
		"xdg-app-paths": "^5.3.0"
	},
	"devDependencies": {
		"@commitlint/cli": "^11.0.0",
		"@commitlint/config-conventional": "^11.0.0",
		"cspell": "^4.2.7",
		"cross-env": "^7.0.3",
		"cross-spawn": "^7.0.3",
		"editorconfig-checker": "^3.3.0",
		"eslint": "^7.11.0",
		"eslint-config-prettier": "^6.11.0",
		"eslint-plugin-eslint-comments": "^3.2.0",
		"eslint-plugin-import": "^2.22.0",
		"is-node-modern": "^1.0.0",
		"npm-run-all": "^4.1.5",
		"prettier": "^2.1.2",
		"remark-cli": "=9.0.0",
		"remark-footnotes": "^3.0.0",
		"remark-preset-lint-consistent": "^4.0.0",
		"remark-preset-lint-markdown-style-guide": "^4.0.0",
		"remark-preset-lint-recommended": "^5.0.0",
		"shelljs": "^0.8.3",
		"shx": "^0.3.2"
	},
	"prettier # overrides/[*.markdown]/tabWidth": "// set to 4 when https://github.com/prettier/prettier/issues/5019 is fixed",
	"prettier": {
		"printWidth": 100,
		"singleQuote": true,
		"useTabs": true,
		"tabWidth": 2,
		"overrides": [
			{
				"files": [
					"*.markdown",
					"*.md",
					"*.mkd"
				],
				"options": {
					"tabWidth": 2,
					"useTabs": false
				}
			}
		]
	}
}
